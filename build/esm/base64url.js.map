{
  "version": 3,
  "sources": ["../../src/base64url.ts"],
  "sourcesContent": ["/**\n * Base64 URL: Base64 encoding with URL-safe character set\n *\n * - Replace `+` with `-`\n * - Replace `/` with `_`\n * - Remove `=` padding\n */\n\nconst chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_'\n\nexport function encodeBase64Url(arraybuffer: ArrayBuffer): string {\n  const bytes = new Uint8Array(arraybuffer)\n\n  let i\n  const len = bytes.length\n  let base64 = ''\n\n  for (i = 0; i < len; i += 3) {\n    base64 += chars[bytes[i] >> 2]\n    base64 += chars[((bytes[i] & 3) << 4) | (bytes[i + 1] >> 4)]\n    base64 += chars[((bytes[i + 1] & 15) << 2) | (bytes[i + 2] >> 6)]\n    base64 += chars[bytes[i + 2] & 63]\n  }\n\n  if (len % 3 === 2) {\n    base64 = base64.substring(0, base64.length - 1)\n  } else if (len % 3 === 1) {\n    base64 = base64.substring(0, base64.length - 2)\n  }\n\n  return base64\n}\n\nlet lookup: Uint8Array | undefined\n\nexport function decodeBase64Url(base64: string): ArrayBuffer {\n  // Create lookup table to find the index\n  if (!lookup) {\n    lookup = new Uint8Array(256)\n    for (let i = 0; i < chars.length; i++) {\n      lookup[chars.charCodeAt(i)] = i\n    }\n  }\n\n  const len: number = base64.length\n  let bufferLength: number = (len * 3) / 4\n\n  if (base64[base64.length - 1] === '=') {\n    bufferLength--\n    if (base64[base64.length - 2] === '=') {\n      bufferLength--\n    }\n  }\n\n  const arraybuffer = new ArrayBuffer(bufferLength)\n  const bytes = new Uint8Array(arraybuffer)\n\n  let encoded1: number\n  let encoded2: number\n  let encoded3: number\n  let encoded4: number\n  let p = 0\n\n  for (let i = 0; i < len; i += 4) {\n    encoded1 = lookup[base64.charCodeAt(i)]\n    encoded2 = lookup[base64.charCodeAt(i + 1)]\n    encoded3 = lookup[base64.charCodeAt(i + 2)]\n    encoded4 = lookup[base64.charCodeAt(i + 3)]\n\n    bytes[p++] = (encoded1 << 2) | (encoded2 >> 4)\n    bytes[p++] = ((encoded2 & 15) << 4) | (encoded3 >> 2)\n    bytes[p++] = ((encoded3 & 3) << 6) | (encoded4 & 63)\n  }\n\n  return arraybuffer\n}\n"],
  "mappings": "AAQA,MAAMA,EAAQ,mEAEP,SAASC,EAAgBC,EAAkC,CAChE,MAAMC,EAAQ,IAAI,WAAWD,CAAW,EAExC,IAAIE,EACJ,MAAMC,EAAMF,EAAM,OAClB,IAAIG,EAAS,GAEb,IAAKF,EAAI,EAAGA,EAAIC,EAAKD,GAAK,EACxBE,GAAUN,EAAMG,EAAMC,CAAC,GAAK,CAAC,EAC7BE,GAAUN,GAAQG,EAAMC,CAAC,EAAI,IAAM,EAAMD,EAAMC,EAAI,CAAC,GAAK,CAAE,EAC3DE,GAAUN,GAAQG,EAAMC,EAAI,CAAC,EAAI,KAAO,EAAMD,EAAMC,EAAI,CAAC,GAAK,CAAE,EAChEE,GAAUN,EAAMG,EAAMC,EAAI,CAAC,EAAI,EAAE,EAGnC,OAAIC,EAAM,IAAM,EACdC,EAASA,EAAO,UAAU,EAAGA,EAAO,OAAS,CAAC,EACrCD,EAAM,IAAM,IACrBC,EAASA,EAAO,UAAU,EAAGA,EAAO,OAAS,CAAC,GAGzCA,CACT,CAEA,IAAIC,EAEG,SAASC,EAAgBF,EAA6B,CAE3D,GAAI,CAACC,EAAQ,CACXA,EAAS,IAAI,WAAW,GAAG,EAC3B,QAASH,EAAI,EAAGA,EAAIJ,EAAM,OAAQI,IAChCG,EAAOP,EAAM,WAAWI,CAAC,CAAC,EAAIA,CAElC,CAEA,MAAMC,EAAcC,EAAO,OAC3B,IAAIG,EAAwBJ,EAAM,EAAK,EAEnCC,EAAOA,EAAO,OAAS,CAAC,IAAM,MAChCG,IACIH,EAAOA,EAAO,OAAS,CAAC,IAAM,KAChCG,KAIJ,MAAMP,EAAc,IAAI,YAAYO,CAAY,EAC1CN,EAAQ,IAAI,WAAWD,CAAW,EAExC,IAAIQ,EACAC,EACAC,EACAC,EACAC,EAAI,EAER,QAASV,EAAI,EAAGA,EAAIC,EAAKD,GAAK,EAC5BM,EAAWH,EAAOD,EAAO,WAAWF,CAAC,CAAC,EACtCO,EAAWJ,EAAOD,EAAO,WAAWF,EAAI,CAAC,CAAC,EAC1CQ,EAAWL,EAAOD,EAAO,WAAWF,EAAI,CAAC,CAAC,EAC1CS,EAAWN,EAAOD,EAAO,WAAWF,EAAI,CAAC,CAAC,EAE1CD,EAAMW,GAAG,EAAKJ,GAAY,EAAMC,GAAY,EAC5CR,EAAMW,GAAG,GAAMH,EAAW,KAAO,EAAMC,GAAY,EACnDT,EAAMW,GAAG,GAAMF,EAAW,IAAM,EAAMC,EAAW,GAGnD,OAAOX,CACT",
  "names": ["chars", "encodeBase64Url", "arraybuffer", "bytes", "i", "len", "base64", "lookup", "decodeBase64Url", "bufferLength", "encoded1", "encoded2", "encoded3", "encoded4", "p"]
}
