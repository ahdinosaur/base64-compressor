{
  "version": 3,
  "sources": ["../../src/test.ts"],
  "sourcesContent": ["// https://nodejs.org/api/test.html\nimport test from 'node:test'\nimport assert from 'node:assert'\nimport { encode, decode, encodeBinary, decodeBinary } from './index.js'\n\nconst randomUnicodeString = (length: number): string =>\n  Array.from({ length }, () =>\n    String.fromCharCode(Math.floor(Math.random() * 65536)),\n  ).join('')\n\ntest('encode/decode string', async () => {\n  for (let i = 0; i < 100; i++) {\n    const text = randomUnicodeString(100)\n    assert.strictEqual(text, await decode(await encode(text)))\n  }\n})\n\ntest('encode/decode binary', async () => {\n  for (let i = 0; i < 100; i++) {\n    const buffer = new ArrayBuffer(100)\n    const view = new DataView(buffer)\n    for (let i = 0, len = buffer.byteLength - 1; i < len; i++) {\n      view.setUint16(i, Math.floor(Math.random() * (1 << 29) - 1))\n    }\n    assert.deepEqual(buffer, await decodeBinary(await encodeBinary(buffer)))\n  }\n})\n"],
  "mappings": "AACA,OAAOA,MAAU,YACjB,OAAOC,MAAY,cACnB,OAAS,UAAAC,EAAQ,UAAAC,EAAQ,gBAAAC,EAAc,gBAAAC,MAAoB,aAE3D,MAAMC,EAAuBC,GAC3B,MAAM,KAAK,CAAE,OAAAA,CAAO,EAAG,IACrB,OAAO,aAAa,KAAK,MAAM,KAAK,OAAO,EAAI,KAAK,CAAC,CACvD,EAAE,KAAK,EAAE,EAEXP,EAAK,uBAAwB,SAAY,CACvC,QAASQ,EAAI,EAAGA,EAAI,IAAKA,IAAK,CAC5B,MAAMC,EAAOH,EAAoB,GAAG,EACpCL,EAAO,YAAYQ,EAAM,MAAMN,EAAO,MAAMD,EAAOO,CAAI,CAAC,CAAC,CAC3D,CACF,CAAC,EAEDT,EAAK,uBAAwB,SAAY,CACvC,QAASQ,EAAI,EAAGA,EAAI,IAAKA,IAAK,CAC5B,MAAME,EAAS,IAAI,YAAY,GAAG,EAC5BC,EAAO,IAAI,SAASD,CAAM,EAChC,QAASF,EAAI,EAAGI,EAAMF,EAAO,WAAa,EAAGF,EAAII,EAAKJ,IACpDG,EAAK,UAAUH,EAAG,KAAK,MAAM,KAAK,OAAO,GAAK,GAAK,IAAM,CAAC,CAAC,EAE7DP,EAAO,UAAUS,EAAQ,MAAML,EAAa,MAAMD,EAAaM,CAAM,CAAC,CAAC,CACzE,CACF,CAAC",
  "names": ["test", "assert", "encode", "decode", "encodeBinary", "decodeBinary", "randomUnicodeString", "length", "i", "text", "buffer", "view", "len"]
}
