{
  "version": 3,
  "sources": ["../../src/compress.ts"],
  "sourcesContent": ["// Browser and server\nconst { CompressionStream, DecompressionStream, Response } = globalThis\n\nexport type CompressionFormat = 'gzip' | 'deflate' | 'deflate-raw'\n\nexport async function compress(\n  data: string | ArrayBuffer,\n  compressionFormat: CompressionFormat = 'gzip',\n): Promise<ArrayBuffer> {\n  const compressor = new CompressionStream(compressionFormat)\n  const stream = new Response(data).body?.pipeThrough(compressor)\n  return await new Response(stream).arrayBuffer()\n}\n\nasync function decompressAsResponse(\n  bytes: ArrayBuffer,\n  compressionFormat: CompressionFormat = 'gzip',\n): Promise<Response> {\n  const decompressor = new DecompressionStream(compressionFormat)\n  const stream = new Response(bytes).body?.pipeThrough(decompressor)\n  return await new Response(stream)\n}\n\nexport async function decompressAsArrayBuffer(\n  bytes: ArrayBuffer,\n  compressionFormat: CompressionFormat = 'gzip',\n): Promise<ArrayBuffer> {\n  return (await decompressAsResponse(bytes, compressionFormat)).arrayBuffer()\n}\n\nexport async function decompressAsString(\n  bytes: ArrayBuffer,\n  compressionFormat: CompressionFormat = 'gzip',\n): Promise<string> {\n  return (await decompressAsResponse(bytes, compressionFormat)).text()\n}\n\nexport { decompressAsArrayBuffer as decompress }\n"],
  "mappings": "AACA,KAAM,CAAE,kBAAAA,EAAmB,oBAAAC,EAAqB,SAAAC,CAAS,EAAI,WAI7D,eAAsBC,EACpBC,EACAC,EAAuC,OACjB,CACtB,MAAMC,EAAa,IAAIN,EAAkBK,CAAiB,EACpDE,EAAS,IAAIL,EAASE,CAAI,EAAE,MAAM,YAAYE,CAAU,EAC9D,OAAO,MAAM,IAAIJ,EAASK,CAAM,EAAE,YAAY,CAChD,CAEA,eAAeC,EACbC,EACAJ,EAAuC,OACpB,CACnB,MAAMK,EAAe,IAAIT,EAAoBI,CAAiB,EACxDE,EAAS,IAAIL,EAASO,CAAK,EAAE,MAAM,YAAYC,CAAY,EACjE,OAAO,MAAM,IAAIR,EAASK,CAAM,CAClC,CAEA,eAAsBI,EACpBF,EACAJ,EAAuC,OACjB,CACtB,OAAQ,MAAMG,EAAqBC,EAAOJ,CAAiB,GAAG,YAAY,CAC5E,CAEA,eAAsBO,EACpBH,EACAJ,EAAuC,OACtB,CACjB,OAAQ,MAAMG,EAAqBC,EAAOJ,CAAiB,GAAG,KAAK,CACrE",
  "names": ["CompressionStream", "DecompressionStream", "Response", "compress", "data", "compressionFormat", "compressor", "stream", "decompressAsResponse", "bytes", "decompressor", "decompressAsArrayBuffer", "decompressAsString"]
}
